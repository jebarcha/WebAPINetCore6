<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Repositorio Genérico</Title>
			<Shortcut>genrepo</Shortcut>
			<Description>Fragmento de código para generar un repositorio genérico</Description>
			<Author>Jimmy Javier</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>			
            <Imports>                
                <Import>
                    <Namespace>Core.Entities</Namespace>
                </Import>
                <Import>
                    <Namespace>Core.Interfaces</Namespace>
                </Import>
                <Import>
                    <Namespace>Infrastructure.Data</Namespace>
                </Import>
                <Import>
                    <Namespace>Microsoft.EntityFrameworkCore</Namespace>
                </Import>
                <Import>
                    <Namespace>System.Linq.Expressions</Namespace>
                </Import>
            </Imports>
			<Code Language="csharp"><![CDATA[public class GenericRepository<T> : IGenericRepository<T> where T : BaseEntity
            {
                protected readonly TiendaContext _context;
                
                public GenericRepository(TiendaContext context)
                {
                    _context = context;
                }

                public virtual void Add(T entity)
                {
                    _context.Set<T>().Add(entity);
                }

                public virtual void AddRange(IEnumerable<T> entities)
                {
                    _context.Set<T>().AddRange(entities);
                }

                public virtual IEnumerable<T> Find(Expression<Func<T, bool>> expression)
                {
                    return _context.Set<T>().Where(expression);
                }

                public virtual async Task<IEnumerable<T>> GetAllAsync()
                {
                    return await _context.Set<T>().ToListAsync();
                }

                public virtual async Task<T> GetByIdAsync(int id)
                {
                    return await _context.Set<T>().FindAsync(id);
                }

                public virtual void Remove(T entity)
                {
                    _context.Set<T>().Remove(entity);
                }

                public virtual void RemoveRange(IEnumerable<T> entities)
                {
                    _context.Set<T>().RemoveRange(entities);
                }

                public virtual void Update(T entity)
                {
                    _context.Set<T>()
                        .Update(entity);
                }
            }
            $end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
