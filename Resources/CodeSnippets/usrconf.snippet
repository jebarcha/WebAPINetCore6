<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Clase de Configuración de la clase entidad Usuario</Title>
			<Shortcut>usrconf</Shortcut>
			<Description>Fragmento de código para generar la clase de configuración para la entidad Usuario.</Description>
			<Author>Jimmy Javier</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>			
            <Imports>                
                <Import>
                    <Namespace>Core.Entities</Namespace>
                </Import>                
                <Import>
                    <Namespace>Microsoft.EntityFrameworkCore</Namespace>
                </Import>
                <Import>
                    <Namespace>Microsoft.EntityFrameworkCore.Metadata.Builders</Namespace>
                </Import>
            </Imports>
			<Code Language="csharp"><![CDATA[public class UsuarioConfiguration : IEntityTypeConfiguration<Usuario>
            {
                public void Configure(EntityTypeBuilder<Usuario> builder)
                {
                    builder.ToTable("Usuario");
                    builder.Property(p => p.Id)
                            .IsRequired();
                    builder.Property(p => p.Nombres)
                            .IsRequired()
                            .HasMaxLength(200);
                    builder.Property(p => p.ApellidoPaterno)
                            .IsRequired()
                            .HasMaxLength(200);
                    builder.Property(p => p.Username)
                            .IsRequired()
                            .HasMaxLength(200);
                    builder.Property(p => p.Email)
                            .IsRequired()
                            .HasMaxLength(200);

                    builder
                    .HasMany(p => p.Roles)
                    .WithMany(p => p.Usuarios)
                    .UsingEntity<UsuariosRoles>(
                        j => j
                            .HasOne(pt => pt.Rol)
                            .WithMany(t => t.UsuariosRoles)
                            .HasForeignKey(pt => pt.RolId),
                        j => j
                            .HasOne(pt => pt.Usuario)
                            .WithMany(p => p.UsuariosRoles)
                            .HasForeignKey(pt => pt.UsuarioId),
                        j =>
                        {                   
                            j.HasKey(t => new { t.UsuarioId, t.RolId });
                        });                    

                }
            }
            $end$]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
