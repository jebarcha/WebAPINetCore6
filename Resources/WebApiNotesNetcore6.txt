-Best Practices and Design Patterns
-C#
-JSON
-Repository
-Unit of Work
-Dependency Injection
-Entity Framework Core
-Json Web Token
-Refresh Token

Tools:
-Visual Studio Code
-Visual Studio 2022
-Postman
-Docker
--------------

*We can use a BaseApiController.cs 
with the Route and Apicontroller and inherit to the other controllers

*See if we can remove the <Nullable>enable</Nullable> from the project

*Verify ports in Properties/LaunchSettings.json

*CORS: Cross-Origen Resource Sharing)

*Repository and Unit of Work (UOW)
 -allows to create a layer of abstraction between data and business logic
 -Separation of responsabilities or concers (SRP)
 -reduce code duplication
 -business logic can be tested without accesing the data
 https://bit.ly/3v4J5SJ
 
UOW -Group one or more operations (repositories)
    -maintains a consistent state in the database
    -it is a repository container


----------------------------------------
Best Practices - Recomendations

*Rate Limiting - control number of request in a time
   install package AspNetCoreRateLimit
   https://bit.ly/3KMc6Hp (github)
   add a extended method in ApplicationServiceExtensions.cs
	 public static void ConfigureRateLimiting(this IServiceCollection services)
   in program.cs add: builder.Services.ConfigureRateLimiting();
   and middleware: app.UseIpRateLimiting();
   This will return an error 429 Too Many Requests
			API calls quota exceeded! maximum admitted 2 per 10s.
			
*Versioning with Query String and Headers
   way 1: https://localhost:5001/api/v1/products
		  https://localhost:5001/api/v2/products
   it is not recommended because our clients should also change the url
   
   way 2: querystrings and headers
    install: Microsoft.Aspnetcore.Mvc.Versioning
	add extended method public static void ConfigureApiVersioning(this IServiceCollection services)
		options.ApiVersionReader = new QueryStringApiVersionReader("ver");
   in program.cs add: builder.Services.ConfigureApiVersioning();
   add annotation in method: [ApiVersion("1.1")]
   
   way 2: using Headers
		options.ApiVersionReader = new HeaderApiVersionReader("X-Version");
     add header X-Version = 1.1
   
*Content negotiation - select the best resource for a response (format json, xml, csv)
  https://bit.ly/3KY1XYe
https://docs.microsoft.com/en-us/aspnet/core/web-api/advanced/custom-formatters?view=aspnetcore-6.0

*Pagination


-------------------------------------------------
=================================================
Implement Authentication and Authorization
 JWT - Json Web Token
 Authorization by Roles (permissions)
 
 1.Client authenticates with her credentials
 2.Web aPI emit a Token and additional data
 3.Each request includes the Token
 4.Web API validates the token and allow or reject access
  
  *Steps 3 and 4 are repeated until the token expires
  
 5.Token expires
 6.Client request a new token providing the refresh token.
 7.web api provides a new token and a refresh token.
 
 *Steps from 3 to 7 are repeated until token expires
 
 8.When refresh token expires, then the client must authenticate again,
	so it will start the flow from step 1.
 
 
*Usually we start creating the User, Rol and UsersRoles models or Entities. (Core/Entities)
*Add with fluent api, RolConfiguration.cs, UserConfiguration and 
*add new method in MyStoreContextSeed.cs to seed roles. (Administrator, Manager, Employee)
*add DbSet in MyStoreContext.cs for User and Rol
	public DbSet<User> Users { get; set; }
    public DbSet<Rol> Roles { get; set; }
*update program.cs with line: 
	await MyStoreContextSeed.SeedRolesAsync(context, loggerFactory);
*Migrate db with entity framework (Add-Migration and Update-Database)
*Create the interfaces IUserRepository.cs, IRolRepository.cs (Core/Interfaces)
*Add Roles and Users in IUnitOfWork.cs and implement in UnitOfWork.cs
*Implement interfaces RolRepository.cs and UserRepository.cs (Infrastructure/Repositories)
**Install Packages for JWT in API project
	-Microsoft.AspNetCore.Authentication.JwtBearer
	-System.IdentityModel.Tokens.Jwt
**
add to appsettings.json
  "JWT": {
    "Key": "rgfZs3pNboV0hbG6Fat",   //secret key used for encryption
    "Issuer": "MyStoreApi",		    //who emmit
    "Audience": "MyStoreApiUser",	//recipients
    "DurationInMinutes":  30	
  }
  
**Create IUserService.cs and UserService in API/Services/
  We will use IPasswordHasher

**Create a new controller UsersController.cs and inject IUserService

**add middleware in program.cs: app.UseAuthentication(); (before app.UseAuthorization();)

**AddScoped in ApplicationServiceExtensions.cs
	services.AddScoped<IPasswordHasher<User>, PasswordHasher<User>>();
    services.AddScoped<IUserService, UserService>();

**Configure JWT:
	in ApplicationServiceExtensions.cs add a new extended method for AddJwt()
	
**add AddJwt to program.cs in section: // Add services to the container.  
	builder.Services.AddJwt(builder.Configuration);

**Create dto, RegisterDto.cs with the model for registering a user
**Add new async method in the interface IUserService.cs
	Task<string> RegisterAsync(RegisterDto model);
**Create a new class in helpers Authorization.cs with enums for roles and default role,
 so we can have strong typed.

**Create methods to create the JWT (RegisterAsync(RegisterDto registerDto))

**Add HttpPost in UsersController.cs	
	[HttpPost("register")]
    public async Task<ActionResult> RegisterAsync(RegisterDto model)
    {
        var result = await _userService.RegisterAsync(model);
        return Ok(result);
    }
	
**add method in IUserRepository
	Task<User> GetByUsernameAsync(string username);
	and implent it in UserRepository.cs
	public async Task<User> GetByUsernameAsync(string username)
    {
        return await _context.Users
            .Include(u => u.Roles)
            .FirstOrDefaultAsync(u => u.Username.ToLower() == username.ToLower());
    }

**Add a new class in Dto folder: LoginDto.cs
**Add a new class in Dto folder: DatosUsuarioDto.cs (will contain the data to return when user is authenticated)	

**Implement method GetToken
	
**Authorization - to restrict access even more if user is authenticated
  403 Forbidden

--To change role of a user:
**Add class AddRoleDto.cs
**Add method to IUserService.cs: Task<string> AddRoleAsync(AddRoleDto model);
**Implement method AddRoleAsync in UserService.cs
**Add new method in UsersController to add a role to a user.

------------------------
Refresh Token
1.Add a new class RefreshToken.cs in Core/Entities
2.Add relation in User.cs:  public ICollection<RefreshToken> RefreshTokens { get; set; } = new HashSet<RefreshToken>();
3.Add fluent api configuration in UserConfiguration.cs
	builder.HasMany(p => p.RefreshTokens)
            .WithOne(p => p.User)
            .HasForeignKey(p => p.UserId);
4.Add a new class RefreshTokenConfiguration.cs in Infrastructure/Data/Configuration/
  public class RefreshTokenConfiguration : IEntityTypeConfiguration<RefreshToken>
  {
    public void Configure(EntityTypeBuilder<RefreshToken> builder)
    {
        builder.ToTable("RefreshToken");  //the name of the token in db
    }
  }

5.Add a new property in DataUserDto.cs 
	[JsonIgnore]  // ->this attribute restricts the property to be shown in the result
	public int RefreshToken { get; set; }
	public DateTime RefreshTokenExpiration { get; set; }
6.Add-Migration RefreshToken 
7.Update-Database

8.Create a private function CreateRefreshToken() 
	Refresh tokens are random data

9.Add a new private method in our UsersController.cs to Set refresh token in cookie for 10 days.
    private void SetRefreshTokenInCookie(string refreshToken)
    {
        var cookieOptions = new CookieOptions
        {
            HttpOnly = true,
            Expires = DateTime.UtcNow.AddDays(10),
        };
        Response.Cookies.Append("refreshToken", refreshToken, cookieOptions);
    }
	
10.Add and Include of RefreshTokens in UserRepository.cs
   public async Task<User> GetByUsernameAsync(string username)
    {
        return await _context.Users
            .Include(u => u.Roles)
            .Include(u => u.RefreshTokens)
            .FirstOrDefaultAsync(u => u.Username.ToLower() == username.ToLower());
    }
	
11.Modif UserService.cs, method GetTokenAsync(LoginDto model), to verify RefreshTokens

12.UsersController.cs, method GetTokenAsync(LoginDto model) to add line SetRefreshTokenInCookie(result.RefreshToken);

   [HttpPost("token")]
    public async Task<IActionResult> GetTokenAsync(LoginDto model)
    {
        var result = await _userService.GetTokenAsync(model);
        SetRefreshTokenInCookie(result.RefreshToken);
        return Ok(result);
    }
	
13.verify appsettings.json, "DurationInMinutes":  1

*Basically we set the token expiration to 1 minute, but the refreshtoken will stay
in the cookie for 10 days.

14.Add new method definition in IUserRepository.cs
	Task<User> GetByRefreshTokenAsync(string username);

15.Implement method GetByRefreshTokenAsync in UserRepository.cs

16.Add new method RefreshTokenAsync in IUserService
	Task<DataUserDto> RefreshTokenAsync(string refreshToken);
	
17.Implement method RefreshTokenAsync in UserService.cs

18.UsersController.cs, create a new method RefreshToken()
	[HttpPost("refresh-token")]
    public async Task<IActionResult> RefreshToken()
    {
        var refreshToken = Request.Cookies["refreshToken"];
        var response = await _userService.RefreshTokenAsync(refreshToken);
        if (!string.IsNullOrEmpty(response.RefreshToken))
            SetRefreshTokenInCookie(response.RefreshToken);
        return Ok(response);
    }
	
	
	